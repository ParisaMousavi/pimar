// automatically generated by Xtext
grammar pimar.editor.textual.xwcore.Xwcore with org.eclipse.xtext.common.Terminals

import "http://www.eclipse.org/emf/2002/Wcore" 
import "http://www.eclipse.org/emf/2002/Ecore" as ecore
import "http://www.eclipse.org/emf/2002/Gcore" as gcore

ProcessContainer returns ProcessContainer:
	{ProcessContainer}
	'ProcessContainer'
	name=EString
	'{'
		('nsURI' nsURI=EString)?
		('nsPrefix' nsPrefix=EString)?
		( processes+=Process (  processes+=Process)*  )?
	'}';


EAnnotation returns ecore::EAnnotation:
	{ecore::EAnnotation}
	'@'
	(source=EString)?
	('(' details+=EStringToStringMapEntry ( "," details+=EStringToStringMapEntry)* ')' )?
;


Process returns Process:
	(eAnnotations+=EAnnotation ( "," eAnnotations+=EAnnotation)* )?
	'Method'
	name=EString '(' ')'
	'{'
		('variables' '{' variables+=Variable ( "," variables+=Variable)* '}' )?
		('return'  return+=Variable ( "," return+=Variable)*  )?
		startTask=Task
	'}'
;

EStringToStringMapEntry returns ecore::EStringToStringMapEntry:
	{ecore::EStringToStringMapEntry}
		key=EString
		'='
		value=EString
	;

Task returns Task:
	Create | InvokeOperation | InvokeProcess | InvokeGUI | If_Impl | IfElse | While | Assign | Sequence | Delete | Read | CrudGui | ProcessSelector;

Variable returns Variable:
	//(eAnnotations+=EAnnotation ( "," eAnnotations+=EAnnotation)* )?
    (changeable?='changeable')? 
	(scope=Scope)?	
	(eType=[ecore::EClassifier|QualifiedName])? ('[' lowerBound=EInt '..' upperBound=EInt ']')?
	name=EString  ( '=' defaultValue=EString)?
;

enum Scope returns Scope:
				LOCAL = 'LOCAL' | GLOBAL = 'GLOBAL';

Permission returns Permission:
	(eAnnotations+=EAnnotation ( "," eAnnotations+=EAnnotation)* )?
	'#'
	(name=EString)?
	permission=Permissions
	;

Create returns Create:
	(eAnnotations+=EAnnotation ( "," eAnnotations+=EAnnotation)* )?
	('permissions' '{' permissions+=Permission ( "," permissions+=Permission)* '}' )?
	'Create'
	(name=EString)?
	return=[Variable] '=' 
	( anchor=[ecore::EObject|QualifiedName] '+' )?  
	'new' eClass=[ecore::EClass|QualifiedName]
	';'
;

InvokeOperation returns InvokeOperation:
	(eAnnotations+=EAnnotation ( "," eAnnotations+=EAnnotation)* )?
	('permissions' '{' permissions+=Permission ( "," permissions+=Permission)* '}' )?
	'InvokeOperation'
	(name=EString)?
	( return=[Variable] '=' )? (long?='long')?
	context=[Variable] '->'
	operation=[ecore::EOperation|QualifiedName]
	('(' arguments+=[Variable] ( "," arguments+=[Variable])* ')' )?
	';'
;

InvokeProcess returns InvokeProcess:
	(eAnnotations+=EAnnotation ( "," eAnnotations+=EAnnotation)* )?
	('permissions' '{' permissions+=Permission ( "," permissions+=Permission)* '}' )?
	'InvokeMethod'
	(name=EString )?
	( '(' return+=[Variable] ( "," return+=[Variable])* ')' '=')?
	(synchronized?='synchronized')?
	subProcess=[Process|QualifiedName]
	('(' arguments+=[Variable] ( "," arguments+=[Variable])* ')' )?
	';'
;


InvokeGUI returns InvokeGUI:
	(eAnnotations+=EAnnotation ( "," eAnnotations+=EAnnotation)* )?
	('permissions' '{' permissions+=Permission ( "," permissions+=Permission)* '}' )?
	'InvokeGUI'
	(name=EString)?
	( '(' outputData+=[Variable] ( "," outputData+=[Variable])* ')' '=' )?
	'page' page=[gcore::Page|QualifiedName]
	( '(' input+=[Variable] ( "," input+=[Variable])* ')' )?
	';'
;

If_Impl returns If:
	(eAnnotations+=EAnnotation ( "," eAnnotations+=EAnnotation)* )?
	('permissions' '{' permissions+=Permission ( "," permissions+=Permission)* '}' )?
	'If'
	(name=EString)?
	condition=Expression
	'{' body=Task '}'
;

IfElse returns IfElse:
	(eAnnotations+=EAnnotation ( "," eAnnotations+=EAnnotation)* )?
	('permissions' '{' permissions+=Permission ( "," permissions+=Permission)* '}' )?
	'If '
	(name=EString)?
	condition=Expression
	'{' body=Task '}'
	'Else' '{' elseBody=Task '}'
;

While returns While:
	(eAnnotations+=EAnnotation ( "," eAnnotations+=EAnnotation)* )?
	('permissions' '{' permissions+=Permission ( "," permissions+=Permission)* '}' )?
	'While'
	(name=EString)?
	condition=Expression
	'{' body=Task '}'
;

Assign returns Assign:
	(eAnnotations+=EAnnotation ( "," eAnnotations+=EAnnotation)* )?
	('permissions' '{' permissions+=Permission ( "," permissions+=Permission)* '}' )?
	'Assign'
	(name=EString)?
	lhs=[Variable] '='  rhs=Expression		
	';'
;

Sequence returns Sequence:
	('permissions' '{' permissions+=Permission ( "," permissions+=Permission)* '}' )?
	'-'
	(name=EString)?
	body=Task
	follower=Task
;

Delete returns Delete:
	(eAnnotations+=EAnnotation ( "," eAnnotations+=EAnnotation)* )?
	('permissions' '{' permissions+=Permission ( "," permissions+=Permission)* '}' )?
	'Delete'
	(name=EString)?
	'(' object=[Variable] ')' ';'
;

Read returns Read:
	(eAnnotations+=EAnnotation ( "," eAnnotations+=EAnnotation)* )?
	('permissions' '{' permissions+=Permission ( "," permissions+=Permission)* '}' )?
	'Read'
	(name=EString)?
	return=[Variable] 
	('=' object=[Variable])? ';'
;

CrudGui returns CrudGui:
	(eAnnotations+=EAnnotation ( "," eAnnotations+=EAnnotation)* )?
	('permissions' '{' permissions+=Permission ( "," permissions+=Permission)* '}' )?
	'CrudGui'
	(name=EString)? 
	privileges=Privileges
	( anchor=[ecore::EObject|QualifiedName] '+')?  
	contain=[ecore::EClass|QualifiedName] ';'
;


ProcessSelector returns ProcessSelector:
	(eAnnotations+=EAnnotation ( "," eAnnotations+=EAnnotation)* )?
	('permissions' '{' permissions+=Permission ( "," permissions+=Permission)* '}' )?
	'ProcessSelector'
	(name=EString)?
	'page' page=[gcore::Page|QualifiedName]
    '(' processes+=[Process|EString] ( "," processes+=[Process|EString])* ')' ';'
;

enum Permissions returns Permissions:
				INTERNET = 'INTERNET' | FILE_SYSTEM = 'FILE_SYSTEM' | CALL = 'CALL' | ACCESS_FINE_LOCATION = 'ACCESS_FINE_LOCATION' | ACCESS_NETWORK_STATE = 'ACCESS_NETWORK_STATE' | CAMERA = 'CAMERA' | WRITE_CALENDAR = 'WRITE_CALENDAR' | READ_CALENDAR = 'READ_CALENDAR' | MICROPHONE = 'MICROPHONE';

	
Expression returns Expression:
	TerminalExpression | UnaryExpression | BinaryExpression;
	
TerminalExpression returns TerminalExpression:
		refers=[Variable]
;

UnaryExpression returns UnaryExpression:
		 operator=UnaryOperators
		 rightExpression=Expression
;

BinaryExpression returns BinaryExpression:
	'('
		 leftExpressions=Expression
		 operator=BinaryOperators
		 rightExpression=Expression
	')'
;

enum UnaryOperators returns UnaryOperators:
				NOT = 'NOT' | HEAD = 'HEAD' | ID = 'ID';

enum BinaryOperators returns BinaryOperators:
				AND = '&&' | CONTAINS = 'CONTAINS' | CONCAT = 'CONCAT' | EQUAL = '==';

enum Privileges returns Privileges:
				READ_ONLY = 'READ_ONLY' | MODIFY = 'MODIFY' | MODIFY_CREATE = 'MODIFY_CREATE' | ALL = 'ALL';
				
QualifiedName:
ID ("." ID)*;

EInt returns ecore::EInt:
	'-'? INT;
	
EString returns ecore::EString:
	STRING | ID;



StylePageSettings returns gcore::StylePageSettings:
	'StylePageSettings'
	'{'
		('imagePosition' imagePosition=EInt)?
		('textPosition' textPosition=EInt)?
		('frame' frame=EInt)?
		'frameColor' frameColor=[gcore::RGBColor|EString]
	'}';

EditPage returns gcore::EditPage:
	'EditPage'
	name=EString
	'{'
		'pageStyle' pageStyle=[gcore::StylePageSettings|EString]
		('eAnnotations' '{' eAnnotations+=EAnnotation ( "," eAnnotations+=EAnnotation)* '}' )?
	'}';

ListPage returns gcore::ListPage:
	'ListPage'
	name=EString
	'{'
		'pageStyle' pageStyle=[gcore::StylePageSettings|EString]
		'listablepageStyle' listablepageStyle=[gcore::StyleListSettings|EString]
		('menu' menu=[gcore::Menu|EString])?
		('eAnnotations' '{' eAnnotations+=EAnnotation ( "," eAnnotations+=EAnnotation)* '}' )?
	'}';

ViewPage returns gcore::ViewPage:
	'ViewPage'
	name=EString
	'{'
		'pageStyle' pageStyle=[gcore::StylePageSettings|EString]
		('menu' menu=[gcore::Menu|EString])?
		('eAnnotations' '{' eAnnotations+=EAnnotation ( "," eAnnotations+=EAnnotation)* '}' )?
	'}';

CustomPage returns gcore::CustomPage:
	'CustomPage'
	name=EString
	'{'
		'pageStyle' pageStyle=[gcore::StylePageSettings|EString]
		('eAnnotations' '{' eAnnotations+=EAnnotation ( "," eAnnotations+=EAnnotation)* '}' )?
	'}';

LoginPage returns gcore::LoginPage:
	'LoginPage'
	name=EString
	'{'
		'pageStyle' pageStyle=[gcore::StylePageSettings|EString]
		('eAnnotations' '{' eAnnotations+=EAnnotation ( "," eAnnotations+=EAnnotation)* '}' )?
	'}';

ProcessSelectorPage returns gcore::ProcessSelectorPage:
	'ProcessSelectorPage'
	name=EString
	'{'
		'pageStyle' pageStyle=[gcore::StylePageSettings|EString]
		('menu' menu=[gcore::Menu|EString])?
		('eAnnotations' '{' eAnnotations+=EAnnotation ( "," eAnnotations+=EAnnotation)* '}' )?
	'}';

SelectableListPage returns gcore::SelectableListPage:
	(multiSelection?='multiSelection')?
	'SelectableListPage'
	name=EString
	'{'
		'pageStyle' pageStyle=[gcore::StylePageSettings|EString]
		'selectablepageStyle' selectablepageStyle=[gcore::StyleSelectionSettings|EString]
		'listablepageStyle' listablepageStyle=[gcore::StyleListSettings|EString]
		('eAnnotations' '{' eAnnotations+=EAnnotation ( "," eAnnotations+=EAnnotation)* '}' )?
	'}';

MapPage returns gcore::MapPage:
	'MapPage'
	name=EString
	'{'
		'pageStyle' pageStyle=[gcore::StylePageSettings|EString]
		('eAnnotations' '{' eAnnotations+=EAnnotation ( "," eAnnotations+=EAnnotation)* '}' )?
	'}';

MediaPage returns gcore::MediaPage:
	'MediaPage'
	name=EString
	'{'
		'pageStyle' pageStyle=[gcore::StylePageSettings|EString]
		('eAnnotations' '{' eAnnotations+=EAnnotation ( "," eAnnotations+=EAnnotation)* '}' )?
	'}';

ELearningPage returns gcore::ELearningPage:
	'ELearningPage'
	name=EString
	'{'
		'pageStyle' pageStyle=[gcore::StylePageSettings|EString]
		('menu' menu=[gcore::Menu|EString])?
		('eAnnotations' '{' eAnnotations+=EAnnotation ( "," eAnnotations+=EAnnotation)* '}' )?
	'}';

TakePicturePage returns gcore::TakePicturePage:
	'TakePicturePage'
	name=EString
	'{'
		'pageStyle' pageStyle=[gcore::StylePageSettings|EString]
		('eAnnotations' '{' eAnnotations+=EAnnotation ( "," eAnnotations+=EAnnotation)* '}' )?
	'}';

RecordAudioPage returns gcore::RecordAudioPage:
	'RecordAudioPage'
	name=EString
	'{'
		'pageStyle' pageStyle=[gcore::StylePageSettings|EString]
		('eAnnotations' '{' eAnnotations+=EAnnotation ( "," eAnnotations+=EAnnotation)* '}' )?
	'}';

ARPage returns gcore::ARPage:
	'ARPage'
	name=EString
	'{'
		'pageStyle' pageStyle=[gcore::StylePageSettings|EString]
		('eAnnotations' '{' eAnnotations+=EAnnotation ( "," eAnnotations+=EAnnotation)* '}' )?
	'}';

RGBColor returns gcore::RGBColor:
	{gcore::RGBColor}
	'RGBColor'
	name=EString
	'{'
		('blue' blue=EInt)?
		('red' red=EInt)?
		('green' green=EInt)?
		('eAnnotations' '{' eAnnotations+=EAnnotation ( "," eAnnotations+=EAnnotation)* '}' )?
	'}';

StyleListSettings returns gcore::StyleListSettings:
	(separatorShow?='separatorShow')?
	'StyleListSettings'
	'{'
		('listStyle' listStyle=ListStyle)?
		'separatorColor' separatorColor=[gcore::RGBColor|EString]
	'}';

Menu returns gcore::Menu:
	'Menu'
	name=EString
	'{'
		'menuStyle' menuStyle=[gcore::StyleMenuSettings|EString]
		('eAnnotations' '{' eAnnotations+=EAnnotation ( "," eAnnotations+=EAnnotation)* '}' )?
	'}';

enum ListStyle returns gcore::ListStyle:
				GRID = 'GRID' | LIST = 'LIST';

StyleMenuSettings returns gcore::StyleMenuSettings:
	{gcore::StyleMenuSettings}
	(fixedMenu?='fixedMenu')?
	'StyleMenuSettings'
	'{'
		('menuStyle' menuStyle=MenuStyle)?
	'}';

enum MenuStyle returns gcore::MenuStyle:
				TILE = 'TILE' | GRID = 'GRID';

StyleSelectionSettings returns gcore::StyleSelectionSettings:
	'StyleSelectionSettings'
	'{'
		'selectionColor' selectionColor=[gcore::RGBColor|EString]
	'}';
	

EObject returns ecore::EObject:
	{ecore::EObject}
	'EObject'
	;

ETypeParameter returns ecore::ETypeParameter:
	{ecore::ETypeParameter}
	'ETypeParameter'
	name=EString
	'{'
		('eAnnotations' '{' eAnnotations+=EAnnotation ( "," eAnnotations+=EAnnotation)* '}' )?
		('eBounds' '{' eBounds+=EGenericType ( "," eBounds+=EGenericType)* '}' )?
	'}';

EClass returns ecore::EClass:
	{ecore::EClass}
	(abstract?='abstract')?
	(interface?='interface')?
	'EClass'
	name=EString
	'{'
		('instanceClassName' instanceClassName=EString)?
		('instanceTypeName' instanceTypeName=EString)?
		('eSuperTypes' '(' eSuperTypes+=[ecore::EClass|EString] ( "," eSuperTypes+=[ecore::EClass|EString])* ')' )?
		('eAnnotations' '{' eAnnotations+=EAnnotation ( "," eAnnotations+=EAnnotation)* '}' )?
		('eTypeParameters' '{' eTypeParameters+=ETypeParameter ( "," eTypeParameters+=ETypeParameter)* '}' )?
		('eOperations' '{' eOperations+=EOperation ( "," eOperations+=EOperation)* '}' )?
		('eStructuralFeatures' '{' eStructuralFeatures+=EStructuralFeature ( "," eStructuralFeatures+=EStructuralFeature)* '}' )?
		('eGenericSuperTypes' '{' eGenericSuperTypes+=EGenericType ( "," eGenericSuperTypes+=EGenericType)* '}' )?
	'}';
EClassifier returns ecore::EClassifier:
	EClass | EDataType_Impl | EEnum;


EStructuralFeature returns ecore::EStructuralFeature:
	EAttribute | EReference;


EPackage returns ecore::EPackage:
	{ecore::EPackage}
	'EPackage'
	name=EString
	'{'
		('nsURI' nsURI=EString)?
		('nsPrefix' nsPrefix=EString)?
		('eAnnotations' '{' eAnnotations+=EAnnotation ( "," eAnnotations+=EAnnotation)* '}' )?
		('eClassifiers' '{' eClassifiers+=EClassifier ( "," eClassifiers+=EClassifier)* '}' )?
		('eSubpackages' '{' eSubpackages+=EPackage ( "," eSubpackages+=EPackage)* '}' )?
	'}';

EDataType_Impl returns ecore::EDataType:
	{ecore::EDataType}
	'EDataType'
	name=EString
	'{'
		('instanceClassName' instanceClassName=EString)?
		('instanceTypeName' instanceTypeName=EString)?
		('serializable' serializable=EBoolean)?
		('eAnnotations' '{' eAnnotations+=EAnnotation ( "," eAnnotations+=EAnnotation)* '}' )?
		('eTypeParameters' '{' eTypeParameters+=ETypeParameter ( "," eTypeParameters+=ETypeParameter)* '}' )?
	'}';

EEnum returns ecore::EEnum:
	{ecore::EEnum}
	'EEnum'
	name=EString
	'{'
		('instanceClassName' instanceClassName=EString)?
		('instanceTypeName' instanceTypeName=EString)?
		('serializable' serializable=EBoolean)?
		('eAnnotations' '{' eAnnotations+=EAnnotation ( "," eAnnotations+=EAnnotation)* '}' )?
		('eTypeParameters' '{' eTypeParameters+=ETypeParameter ( "," eTypeParameters+=ETypeParameter)* '}' )?
		('eLiterals' '{' eLiterals+=EEnumLiteral ( "," eLiterals+=EEnumLiteral)* '}' )?
	'}';

EGenericType returns ecore::EGenericType:
	{ecore::EGenericType}
	'EGenericType'
	'{'
		('eTypeParameter' eTypeParameter=[ecore::ETypeParameter|EString])?
		('eClassifier' eClassifier=[ecore::EClassifier|EString])?
		('eUpperBound' eUpperBound=EGenericType)?
		('eTypeArguments' '{' eTypeArguments+=EGenericType ( "," eTypeArguments+=EGenericType)* '}' )?
		('eLowerBound' eLowerBound=EGenericType)?
	'}';

EBoolean returns ecore::EBoolean:
	'true' | 'false';

EOperation returns ecore::EOperation:
	{ecore::EOperation}
	'EOperation'
	name=EString
	'{'
		('ordered' ordered=EBoolean)?
		('unique' unique=EBoolean)?
		('lowerBound' lowerBound=EInt)?
		('upperBound' upperBound=EInt)?
		('eType' eType=[ecore::EClassifier|EString])?
		('eExceptions' '(' eExceptions+=[ecore::EClassifier|EString] ( "," eExceptions+=[ecore::EClassifier|EString])* ')' )?
		('eAnnotations' '{' eAnnotations+=EAnnotation ( "," eAnnotations+=EAnnotation)* '}' )?
		('eGenericType' eGenericType=EGenericType)?
		('eTypeParameters' '{' eTypeParameters+=ETypeParameter ( "," eTypeParameters+=ETypeParameter)* '}' )?
		('eParameters' '{' eParameters+=EParameter ( "," eParameters+=EParameter)* '}' )?
		('eGenericExceptions' '{' eGenericExceptions+=EGenericType ( "," eGenericExceptions+=EGenericType)* '}' )?
	'}';


EParameter returns ecore::EParameter:
	{ecore::EParameter}
	'EParameter'
	name=EString
	'{'
		('ordered' ordered=EBoolean)?
		('unique' unique=EBoolean)?
		('lowerBound' lowerBound=EInt)?
		('upperBound' upperBound=EInt)?
		('eType' eType=[ecore::EClassifier|EString])?
		('eAnnotations' '{' eAnnotations+=EAnnotation ( "," eAnnotations+=EAnnotation)* '}' )?
		('eGenericType' eGenericType=EGenericType)?
	'}';

EAttribute returns ecore::EAttribute:
	{ecore::EAttribute}
	(volatile?='volatile')?
	(transient?='transient')?
	(unsettable?='unsettable')?
	(derived?='derived')?
	(iD?='iD')?
	'EAttribute'
	name=EString
	'{'
		('ordered' ordered=EBoolean)?
		('unique' unique=EBoolean)?
		('lowerBound' lowerBound=EInt)?
		('upperBound' upperBound=EInt)?
		('changeable' changeable=EBoolean)?
		('defaultValueLiteral' defaultValueLiteral=EString)?
		('eType' eType=[ecore::EClassifier|EString])?
		('eAnnotations' '{' eAnnotations+=EAnnotation ( "," eAnnotations+=EAnnotation)* '}' )?
		('eGenericType' eGenericType=EGenericType)?
	'}';

EReference returns ecore::EReference:
	{ecore::EReference}
	(volatile?='volatile')?
	(transient?='transient')?
	(unsettable?='unsettable')?
	(derived?='derived')?
	(containment?='containment')?
	'EReference'
	name=EString
	'{'
		('ordered' ordered=EBoolean)?
		('unique' unique=EBoolean)?
		('lowerBound' lowerBound=EInt)?
		('upperBound' upperBound=EInt)?
		('changeable' changeable=EBoolean)?
		('defaultValueLiteral' defaultValueLiteral=EString)?
		('resolveProxies' resolveProxies=EBoolean)?
		('eType' eType=[ecore::EClassifier|EString])?
		('eOpposite' eOpposite=[ecore::EReference|EString])?
		('eKeys' '(' eKeys+=[ecore::EAttribute|EString] ( "," eKeys+=[ecore::EAttribute|EString])* ')' )?
		('eAnnotations' '{' eAnnotations+=EAnnotation ( "," eAnnotations+=EAnnotation)* '}' )?
		('eGenericType' eGenericType=EGenericType)?
	'}';

EEnumLiteral returns ecore::EEnumLiteral:
	{ecore::EEnumLiteral}
	'EEnumLiteral'
	name=EString
	'{'
		('value' value=EInt)?
		('literal' literal=EString)?
		('eAnnotations' '{' eAnnotations+=EAnnotation ( "," eAnnotations+=EAnnotation)* '}' )?
	'}';
	
