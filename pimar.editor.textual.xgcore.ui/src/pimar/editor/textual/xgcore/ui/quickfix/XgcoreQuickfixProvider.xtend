/*
* generated by Xtext
*/
package pimar.editor.textual.xgcore.ui.quickfix

import org.eclipse.xtext.ui.editor.quickfix.Fix
import pimar.editor.textual.xgcore.validation.XgcoreValidator
import org.eclipse.xtext.validation.Issue
import org.eclipse.xtext.ui.editor.quickfix.IssueResolutionAcceptor
import org.eclipse.xtext.ui.editor.model.edit.ISemanticModification
import org.eclipse.emf.ecore.EObject
import org.eclipse.xtext.ui.editor.model.edit.IModificationContext
import gcore.StyleSetting
import gcore.RGBColor

//import org.eclipse.xtext.ui.editor.quickfix.Fix
//import org.eclipse.xtext.ui.editor.quickfix.IssueResolutionAcceptor
//import org.eclipse.xtext.validation.Issue

/**
 * Custom quickfixes.
 *
 * see http://www.eclipse.org/Xtext/documentation.html#quickfixes
 */
class XgcoreQuickfixProvider extends org.eclipse.xtext.ui.editor.quickfix.DefaultQuickfixProvider {
	
	/**
	 * Quickfix for duplicate color value which is detected through validation
	 * @date 07052016
	 */
	@Fix(XgcoreValidator::DUPLICATE_COLOR)
	def void FixDuplicateColor(Issue issue, IssueResolutionAcceptor acceptor){
		acceptor.accept(
			issue,
			"Duplicate Color",
			"The RGB values of the current color has been defined before." + issue.data.get(0),
			"",
			[
				element,context|
				if(Integer::parseInt(issue.data.get(0))<(element as StyleSetting).rgbColors.length){
					(element as StyleSetting).rgbColors.get(Integer::parseInt(issue.data.get(0))).red = 100
				}
			]
		)
	}



//	@Fix(MyDslValidator::INVALID_NAME)
//	def capitalizeName(Issue issue, IssueResolutionAcceptor acceptor) {
//		acceptor.accept(issue, 'Capitalize name', 'Capitalize the name.', 'upcase.png') [
//			context |
//			val xtextDocument = context.xtextDocument
//			val firstLetter = xtextDocument.get(issue.offset, 1)
//			xtextDocument.replace(issue.offset, 1, firstLetter.toUpperCase)
//		]
//	}
}

